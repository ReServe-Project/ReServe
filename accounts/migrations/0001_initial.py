# Generated by Django 5.2.7 on 2025-10-22 11:51

import accounts.models
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('member', 'Member'), ('instructor', 'Instructor')], default='member', max_length=20)),
                ('display_name', models.CharField(blank=True, help_text='Public display name.', max_length=50)),
                ('handle', models.SlugField(help_text='Unique handle used in profile URLs, e.g., @john_doe', max_length=30, unique=True, validators=[django.core.validators.RegexValidator(message='Handle must be 3–20 chars, lowercase a–z, digits 0–9, underscore (_) or dot (.).', regex='^[a-z0-9_.]{3,20}$')])),
                ('bio', models.TextField(blank=True)),
                ('gender', models.CharField(blank=True, max_length=10)),
                ('phone', models.CharField(blank=True, max_length=20, validators=[django.core.validators.RegexValidator(message='Phone must be 6–20 digits, optional leading +.', regex='^\\+?[0-9]{6,20}$')])),
                ('birthdate', models.DateField(blank=True, null=True, validators=[accounts.models.validate_birthdate_not_future])),
                ('location', models.CharField(blank=True, max_length=100)),
                ('avatar', models.ImageField(blank=True, default='avatars/default.png', help_text='JPEG/PNG/WebP up to ~2MB.', upload_to='avatars/')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
